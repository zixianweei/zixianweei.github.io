{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5173\u4e8e","text":"<p>Hi~\uff0c\u6b22\u8fce\u6765\u5230\u6211\u7684\u5c0f\u7834\u7ad9\u3002\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6211\u5b66\u4e60C++\u548c\u56fe\u5f62\u56fe\u50cf\u7b49\u77e5\u8bc6\u7684\u7b14\u8bb0\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u4e0e\u751f\u6d3b\u76f8\u5173\u7684\u5947\u602a\u60f3\u6cd5\u3002</p> <p>\u5982\u679c\u6709\u5565\u60f3\u8bf4\u7684\u8bdd\u53ef\u4ee5\u5728\u6700\u4e0b\u65b9\u8bc4\u8bba\uff0c\u6211\u4f1a\u5c3d\u53ef\u80fd\u56de\u590d\u3002\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u90ae\u4ef6\u8054\u7cfb\u5230\u6211\uff1azixianwei@foxmail.com\u3002</p>"},{"location":"#_2","title":"\u53c2\u4e0e\u7684\u5f00\u6e90\u9879\u76ee","text":"<ul> <li>OpenCV: fix compilation error on Windows ARM, use vaddq_f32 instead of += #24043</li> </ul>"},{"location":"#_3","title":"\u76ee\u524d\u4f7f\u7528\u7684\u8bbe\u5907","text":""},{"location":"camera-calibration-using-opencv/","title":"\u7ffb\u8bd1\uff1aOpenCV\u76f8\u673a\u6807\u5b9a<sup>1</sup>","text":"\u58f0\u660e <p>\u539f\u6587\u6765\u81eaOpenCV\u5b98\u65b9\u6587\u6863<sup>1</sup>\uff0c\u672c\u4eba\u5728\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u7b80\u5355\u52a0\u5de5\u548c\u4fe1\u606f\u8865\u5145\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u4fb5\u72af\u4e86\u60a8\u7684\u5408\u6cd5\u6743\u76ca\uff0c\u8bf7\u4e0e\u6211\u8054\u7cfb\uff0c\u6211\u5c06\u5220\u9664\u672c\u6587\u3002</p>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_1","title":"\u672c\u6587\u76ee\u6807","text":"<p>\u901a\u8fc7\u672c\u6587\uff0c\u6211\u4eec\u5c06\u4f1a\u5b66\u4e60\u4e0e\u5982\u4f55\u4f7f\u7528OpenCV\u8fdb\u884c\u76f8\u673a\u6807\u5b9a\u76f8\u5173\u7684\u77e5\u8bc6\u3002\u5177\u4f53\u7684\uff1a</p> <ol> <li>\u7531\u76f8\u673a\u5bfc\u81f4\u7684\u56fe\u50cf\u7578\u53d8\u6709\u54ea\u4e9b\u7c7b\u578b\uff1b</li> <li>\u5982\u4f55\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u76f8\u673a\u7684\u5185\u53c2\u77e9\u9635\u548c\u5916\u53c2\u77e9\u9635\uff1b</li> <li>\u5982\u4f55\u5229\u7528\u76f8\u673a\u7684\u5185\u53c2\u77e9\u9635\u548c\u5916\u53c2\u77e9\u9635\u5bf9\u56fe\u50cf\u8fdb\u884c\u6d88\u7578\u53d8\u3002</li> </ol>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_2","title":"\u57fa\u7840\u77e5\u8bc6","text":"<p>\u57fa\u4e8e\u5c0f\u5b54\u6210\u50cf\u6a21\u578b\u7684\u76f8\u673a\u4f1a\u4e3a\u6240\u62cd\u6444\u7684\u56fe\u50cf\u5f15\u5165\u56fe\u50cf\u7578\u53d8\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u6700\u4e3b\u8981\u7684\u7578\u53d8\u7c7b\u578b\u662f\uff1a\u5f84\u5411\u7578\u53d8\uff08radial distortion\uff09\u548c\u5207\u5411\u7578\u53d8\uff08tangential distortion\uff09\u3002</p> <p>\u5f84\u5411\u7578\u53d8\u4f1a\u5bfc\u81f4\u771f\u5b9e\u573a\u666f\u4e2d\u7684\u76f4\u7ebf\u53d8\u4e3a\u56fe\u50cf\u4e2d\u7684\u66f2\u7ebf\u3002\u8be5\u73b0\u8c61\u5177\u6709\u8d8a\u8fdc\u79bb\u56fe\u50cf\u4e2d\u5fc3\u8d8a\u660e\u663e\u7684\u7279\u70b9\u3002\u5728\u56fe1\u4e2d\uff0c\u68cb\u76d8\u683c\u4e24\u4fa7\u4f7f\u7528\u4e86\u4e24\u6761\u7ea2\u8272\u53c2\u8003\u7ebf\u4f5c\u4e3a\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u68cb\u76d8\u683c\u7684\u8fb9\u7f18\u4e0d\u518d\u662f\u4e00\u6761\u76f4\u7ebf\uff1b\u4e0e\u7ea2\u8272\u53c2\u8003\u7ebf\u76f8\u6bd4\uff0c\u5f2f\u66f2\u7684\u7ebf\u6761\u5411\u56fe\u50cf\u8fb9\u7f18\u81a8\u80c0\uff1b\u4e14\u8d8a\u9760\u8fd1\u56fe\u50cf\u8fb9\u7f18\uff0c\u7ebf\u6761\u5411\u5916\u81a8\u80c0\u7684\u73b0\u8c61\u8d8a\u660e\u663e\u3002\u5982\u679c\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u6709\u5173\u56fe\u50cf\u7578\u53d8\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u4e2d\u7684\u5149\u5b66\u7578\u53d8<sup>2</sup>\u4e00\u8282\u3002</p> <p> </p>      \u56fe1 \u5f84\u5411\u7578\u53d8\u73b0\u8c61\u5c55\u793a    <p>\u5177\u4f53\u7684\uff0c\u5f84\u5411\u7578\u53d8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u8868\u793a\uff1a</p> \\[ \\begin{align*} x_{distorted} &amp;= x(1 + k_{1} r^2 + k_{2} r^4 + k_{3} r^6) \\\\ y_{distorted} &amp;= y(1 + k_{1} r^2 + k_{2} r^4 + k_{3} r^6). \\end{align*} \\] <p>\u4e0e\u5f84\u5411\u7578\u53d8\u7c7b\u4f3c\uff0c\u5207\u5411\u7578\u53d8\u5219\u662f\u7531\u76f8\u673a\u955c\u5934\u6240\u5728\u5e73\u9762\u548c\u50cf\u5e73\u9762\u975e\u4e25\u683c\u5e73\u884c\u5f15\u8d77\u7684\u3002\u56e0\u6b64\uff0c\u56fe\u50cf\u4e2d\u7684\u90e8\u5206\u533a\u57df\u4f1a\u5b58\u5728\u770b\u4e0a\u53bb\u6bd4\u7406\u8bba\u4e0a\u66f4\u9760\u8fd1\u7684\u73b0\u8c61\u3002\u5207\u5411\u7578\u53d8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u8868\u793a\uff1a</p> \\[ \\begin{align*} x_{distorted} &amp;= x + [2p_{1}xy + p_{2}(r^2+2x^2)] \\\\ y_{distorted} &amp;= y + [p_{1}(r^2+2y^2) + 2p_{2}xy]. \\end{align*} \\] <p>\u6839\u636e\u5f84\u5411\u7578\u53d8\u548c\u5207\u5411\u7578\u53d8\u7684\u8868\u793a\u516c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e94\u4e2a\u53c2\u6570\u8868\u793a\u56fe\u50cf\u7684\u7578\u53d8\u3002\u8fd9\u4e94\u4e2a\u53c2\u6570\u4e5f\u88ab\u79f0\u4e3a\u7578\u53d8\u53c2\u6570\uff08distortion coefficients\uff09\uff1a</p> \\[ \\begin{align*} C_{distortion} = (k_1 \\enspace k_2 \\enspace p_1 \\enspace p_2 \\enspace k_3). \\end{align*} \\] <p>\u9664\u7578\u53d8\u53c2\u6570\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u6765\u5b8c\u6210\u7578\u53d8\u77eb\u6b63\u7684\u6d41\u7a0b\uff0c\u5982\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u548c\u5916\u90e8\u53c2\u6570\u3002</p> <p>\u6bcf\u4e2a\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u5747\u4e0d\u76f8\u540c\uff0c\u4ed6\u53d6\u51b3\u4e8e\u76f8\u673a\u7684\u5149\u5b66\u7279\u6027\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u7531\u76f8\u673a\u7684\u7126\u8ddd\\((f_x, fy)\\)\u548c\u5149\u5fc3\u4f4d\u7f6e\\((c_x, cy)\\)\u7ec4\u6210\u3002\u7531\u4e8e\u6bcf\u4e2a\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u90fd\u662f\u72ec\u6709\u7684\uff0c\u56e0\u6b64\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u53ef\u4ee5\u88ab\u6240\u6709\u8be5\u76f8\u673a\u62cd\u6444\u7684\u56fe\u50cf\u590d\u7528\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u4f1a\u4f7f\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a\\(3\\times 3\\)\u7684\u77e9\u9635\u8868\u793a\uff1a</p> \\[ \\begin{align*} M_{camera} =  \\begin{bmatrix}  f_x &amp; 0 &amp; c_x \\\\ 0 &amp; f_y &amp; c_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}. \\end{align*} \\] <p>\u5bf9\u4e8e\u5916\u90e8\u53c2\u6570\uff0c\u4ed6\u901a\u5e38\u662f\u7531\u4e00\u4e9b\u65cb\u8f6c\u548c\u5e73\u79fb\u7684\u5411\u91cf\u7ec4\u6210\uff0c\u7528\u4e8e\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7269\u4f53\u4f4d\u7f6e\u5230\u76f8\u673a\u5750\u6807\u4f4d\u7f6e\u7684\u8f6c\u6362\u3002\u7531\u4e8e\u6bcf\u5f20\u56fe\u50cf\u4e2d\u62cd\u6444\u7684\u573a\u666f\u90fd\u53ef\u80fd\u5b58\u5728\u4e0d\u540c\uff0c\u5916\u90e8\u53c2\u6570\u5f80\u5f80\u56e0\u62cd\u6444\u7684\u56fe\u50cf\u800c\u5f02\u3002</p> \u8bd1\u8005\u6ce8\uff1a\u5750\u6807\u8f6c\u6362\u548c\u5750\u6807\u7a7a\u95f4 <p>\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u56fe\u5f62\u5b66\u6e32\u67d3\u7ba1\u7ebf\u4e2d\u7684\u9876\u70b9\u5904\u7406\u9636\u6bb5\u8fdb\u884c\u7406\u89e3\u3002\u5728\u53d8\u6362\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u6d89\u53ca\u4e94\u79cd\u5750\u6807\u7a7a\u95f4\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u5c06\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u7269\u4f53\u6295\u5f71\u5230\u76f8\u673a\u5e73\u9762\u4e2d\u3002\u76f8\u5173\u4fe1\u606f\u53ef\u4ee5\u67e5\u9605LearnOpenGL<sup>3</sup>\u3002</p> <p>\u5bf9\u4e8e\u7acb\u4f53\u89c6\u89c9\u5e94\u7528\uff0c\u56fe\u50cf\u7578\u53d8\u662f\u9996\u5148\u9700\u8981\u88ab\u6d88\u9664\u548c\u77eb\u6b63\u7684\uff0c\u5426\u5219\u4f1a\u5f15\u8d77\u540e\u7eed\u5904\u7406\u6d41\u7a0b\u7684\u8bef\u5dee\u7d2f\u8ba1\u6216\u4ea7\u751f\u9519\u8bef\u7ed3\u679c\u3002\u4e3a\u4e86\u5f97\u5230\u7528\u4e8e\u6d88\u9664\u56fe\u50cf\u7578\u53d8\u7684\u53c2\u6570\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u76f8\u673a\u62cd\u6444\u4e00\u4e9b\u7cbe\u5fc3\u8bbe\u8ba1\u573a\u666f\u3002\u5176\u4e2d\uff0c\u6700\u4e3a\u5e38\u89c1\u7684\u573a\u666f\u662f\u68cb\u76d8\u683c\u56fe\u50cf\u3002\u5728\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u80fd\u591f\u9884\u5148\u77e5\u9053\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u5173\u952e\u70b9\u5750\u6807\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u5904\u7406\u7684\u65b9\u5f0f\u5f97\u5230\u5173\u952e\u70b9\u5728\u56fe\u50cf\u4e2d\u7684\u76f8\u5e94\u5750\u6807\u4fe1\u606f\u3002\u901a\u8fc7\u591a\u4e2a\u8fd9\u6837\u7684\u4fe1\u606f\u5bf9\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230\u7528\u4e8e\u6d88\u7578\u53d8\u7684\u7578\u53d8\u53c2\u6570\u3001\u76f8\u673a\u5185\u5916\u53c2\u6570\u7b49\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4e3a\u4e86\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u5f80\u5f80\u9700\u8981\u5bf9\u76f8\u540c\u7684\u573a\u666f\u62cd\u6444\u81f3\u5c1110\u5f20\u4e0d\u540c\u89d2\u5ea6\u7684\u6d4b\u8bd5\u56fe\u50cf\u3002</p>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_3","title":"\u4ee3\u7801\u8be6\u89e3","text":"<p>\u5982\u7b2c\u4e8c\u8282\u6700\u540e\u6240\u8ff0\uff0c\u6211\u4eec\u9700\u8981\u81f3\u5c1110\u5f20\u6d4b\u8bd5\u56fe\u50cf\u7528\u4e8e\u76f8\u673a\u6807\u5b9a\u3002OpenCV\u7684\u4ed3\u5e93\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7ec4\u68cb\u76d8\u683c\u56fe\u50cf\u7528\u4e8e\u5c55\u793a\u76f8\u673a\u6807\u5b9a\u7684\u8fc7\u7a0b\uff0c\u4ed6\u4eec\u4f4d\u4e8e\u4ed3\u5e93\u7684<code>samples/data</code>\u76ee\u5f55\u4e0b\uff0c\u540d\u79f0\u4e3a<code>left*.jpg</code>\u3002\u8003\u8651\u5176\u4e2d\u4efb\u610f\u4e00\u5f20\u68cb\u76d8\u683c\u56fe\u50cf\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u5173\u952e\u4fe1\u606f\u662f\u4e00\u7ec4\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\u548c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u7684\u5750\u6807\u3002\u5176\u4e2d\uff0c\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u70b9\u7684\u5750\u6807\u5341\u5206\u5bb9\u6613\u83b7\u7684\uff0c\u4ed6\u4eec\u5c31\u662f\u68cb\u76d8\u683c\u56fe\u50cf\u4e2d\u4efb\u610f\u4e24\u4e2a\u767d\u8272\u6216\u9ed1\u8272\u65b9\u5757\u7684\u63a5\u89e6\u70b9\u3002</p> <p>\u5bf9\u4e8e\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\uff0c\u7531\u4e8e\u6bcf\u6b21\u62cd\u6444\u65f6\u76f8\u673a\u548c\u68cb\u76d8\u683c\u56fe\u50cf\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u540c\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ed6\u4eec\u7684\\((x, y, z)\\)\u5750\u6807\u3002\u4f46\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u62cd\u6444\u65f6\u68cb\u76d8\u683c\u59cb\u7ec8\u4f4d\u4e8e\\(XY\\)\u5750\u6807\u5e73\u9762\u5185\uff0c\u5373\u6240\u6709\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\\(z\\)\u5750\u6807\u5747\u4e3a0\u3002\u6b64\u65f6\uff0c\u5b9e\u9645\u60c5\u51b5\u4e0b\\(z\\)\u5750\u6807\u7684\u53d8\u5316\u8ba4\u4e3a\u662f\u7531\u76f8\u673a\u6cbf\u5149\u8f74\u65b9\u5411\u524d\u540e\u79fb\u52a8\u5f15\u8d77\u7684\u3002\u901a\u8fc7\u6a21\u578b\u7684\u7b80\u5316\uff0c\u6211\u4eec\u5728\u76f8\u673a\u6807\u5b9a\u65f6\u4ec5\u9700\u77e5\u9053\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\\((x,y)\\)\u5750\u6807\u5373\u53ef\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7b80\u5316\u8fd9\u4e9b\u5750\u6807\uff1a\u7531\u4e8e\u68cb\u76d8\u683c\u5927\u5c0f\u662f\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ec4\u4e8c\u7ef4\u7d22\u5f15\u8868\u793a\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\uff0c\u5982\\((0, 0)\\)\uff0c\\((0, 1)\\)\uff0c\\((0, 2)\\)\u2026\u2026 \u901a\u8fc7\u7d22\u5f15\u503c\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u771f\u5b9e\u7ed3\u679c\u7684\u7f29\u653e\u503c\u3002\u82e5\u6b64\u65f6\u53ef\u4ee5\u77e5\u9053\u68cb\u76d8\u683c\u65b9\u5757\u5b9e\u9645\u5927\u5c0f\uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u771f\u5b9e\u5750\u6807\u3002\u5bf9\u4e8e\u672c\u6587\u7684\u793a\u4f8b\u573a\u666f\uff0c\u7531\u4e8e\u6211\u4eec\u5e76\u672a\u5b9e\u9645\u62cd\u6444\u56fe\u50cf\uff0c\u5e76\u4e0d\u77e5\u6653\u68cb\u76d8\u683c\u65b9\u5757\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u7565\u8fc7\u4e86\u68cb\u76d8\u683c\u56fe\u50cf\u5757\u5927\u5c0f\u7684\u53c2\u6570\uff08\u8be5\u53c2\u6570\u7684\u5355\u4f4d\u4e00\u822c\u662f\\(mm\\)\uff09\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u4e09\u7ef4\u4e16\u754c\u4e2d\u70b9\u7684\u5750\u6807\u88ab\u79f0\u4e3a\u7269\u70b9\uff0c\u4e8c\u7ef4\u56fe\u50cf\u4e2d\u70b9\u7684\u5750\u6807\u88ab\u79f0\u4e3a\u50cf\u70b9\u3002</p>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_4","title":"\u51c6\u5907\u9636\u6bb5","text":"<p>\u4e3a\u4e86\u80fd\u591f\u641c\u7d22\u5230\u68cb\u76d8\u683c\u56fe\u50cf\u4e2d\u7684\u50cf\u70b9\uff0c\u6211\u4eec\u4f7f\u7528<code>cv2.findChessboardCorners()</code>\u51fd\u6570\u8fdb\u884c\u5904\u7406\u3002\u8be5\u51fd\u6570\u9700\u8981\u6211\u4eec\u6307\u5b9a\u68cb\u76d8\u683c\u56fe\u50cf\u7684\u50cf\u70b9\u6392\u5217\u60c5\u51b5\uff0c\u5982\\(8\\times 8\\)\u6216\\(5 \\times 5\\)\u5927\u5c0f\u7684\u68cb\u76d8\u683c\u3002\u5728\u672c\u6587\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\\(7\\times 6\\)\u6392\u5217\u60c5\u51b5\u7684\u68cb\u76d8\u683c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\\(8\\times 8\\)\u6392\u5217\u60c5\u51b5\u7684\u68cb\u76d8\u683c\u80fd\u591f\u627e\u5230\\(7 \\times 7\\)\u4e2a\u50cf\u70b9\u3002\u51fd\u6570\u8fd0\u884c\u540e\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u662f\u5426\u627e\u5230\u6307\u5b9a\u6392\u5217\u6a21\u5f0f\u7684\u6807\u5fd7\u4f4d<code>retval</code>\u3002\u5982\u679c<code>retval</code>\u4e3a<code>True</code>\uff0c\u8868\u793a\u51fd\u6570\u627e\u4e86\u6307\u5b9a\u7684\u50cf\u70b9\u96c6\u5408\u3002\u5e76\u4e14\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u50cf\u70b9\u96c6\u5408\u4f1a\u6309\u987a\u5e8f\u6392\u5217\uff0c\u4f8b\u5982\u4ece\u5de6\u5230\u53f3\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u3002</p> <p>\u5c0f\u63d0\u793a</p> <p>\u5728\u7ed9\u5b9a\u4e00\u7ec4\u68cb\u76d8\u683c\u56fe\u50cf\u540e\uff0c\u8be5\u51fd\u6570\u53ef\u80fd\u65e0\u6cd5\u5728\u4efb\u4f55\u4e00\u5f20\u56fe\u50cf\u4e2d\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u50cf\u70b9\u3002\u56e0\u6b64\uff0c\u8f83\u597d\u7684\u505a\u6cd5\u662f\uff1a\u542f\u52a8\u76f8\u673a\u5e76\u62cd\u6444\u56fe\u50cf\u540e\uff0c\u5c31\u4f7f\u7528\u8be5\u51fd\u6570\u8fdb\u884c\u50cf\u70b9\u7684\u68c0\u6d4b\uff1b\u4e00\u65e6\u80fd\u591f\u5728\u62cd\u6444\u7684\u56fe\u50cf\u4e2d\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u50cf\u70b9\uff0c\u5c31\u5c06\u7ed3\u679c\u4fdd\u5b58\u5230\u6570\u7ec4\u4e2d\u3002\u6b64\u5916\uff0c\u5728\u4e24\u6b21\u62cd\u6444\u4e4b\u95f4\uff0c\u53ef\u4ee5\u9884\u7559\u4e00\u4e9b\u65f6\u95f4\uff0c\u7528\u4e8e\u8c03\u6574\u68cb\u76d8\u683c\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\u3002\u901a\u8fc7\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u6240\u9700\u7684\u7269\u50cf\u70b9\u5bf9\u6570\u6ee1\u8db3\u8981\u6c42\u3002\u5373\u4f7f\u662f\u672c\u6587\u4f7f\u7528\u768413\u5f20\u56fe\u50cf\uff0c\u6211\u4eec\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u6bcf\u5f20\u56fe\u50cf\u90fd\u80fd\u591f\u627e\u5230\u7269\u50cf\u70b9\u5bf9\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u662f\uff1a\u8bfb\u53d6\u6240\u6709\u7684\u56fe\u50cf\u5e76\u9010\u4e2a\u68c0\u6d4b\uff0c\u7136\u540e\u53ea\u9009\u53d6\u5176\u4e2d\u80fd\u591f\u68c0\u6d4b\u51fa\u7b26\u5408\u8981\u6c42\u50cf\u70b9\u7684\u56fe\u50cf\u8fdb\u884c\u540e\u7eed\u5904\u7406\u3002\u9664\u4e86\u68cb\u76d8\u683c\u6807\u5b9a\u677f\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5706\u5f62\u9635\u5217\u6807\u5b9a\u677f\u3002\u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528<code>cv2.findCirclesGrid()</code>\u51fd\u6570\u641c\u7d22\u7b26\u5408\u8981\u6c42\u7684\u50cf\u70b9\uff0c\u5e76\u4e14\u5706\u5f62\u9635\u5217\u6807\u5b9a\u677f\u53ef\u4ee5\u4f7f\u7528\u66f4\u5c11\u7684\u56fe\u50cf\u6570\u91cf\u5b8c\u6210\u76f8\u673a\u6807\u5b9a\u3002</p> \u8bd1\u8005\u6ce8\uff1aOpenCV\u4e2d\u652f\u6301\u7684\u6807\u5b9a\u677f\u7c7b\u578b <p>\u622a\u6b624.8.0\u7248\u672c\uff0cOpenCV\u7684API\u4e2d\u652f\u6301\u4e86\u68cb\u76d8\u683c\u3001\u5706\u5f62\u7f51\u683c\u548cCharuCo\u4e09\u79cd\u6807\u5b9a\u677f<sup>4</sup>\u3002</p> \u8bd1\u8005\u6ce8\uff1a\u68cb\u76d8\u683c\u7684\u89d2\u70b9\u6392\u5217 <p>\u4e00\u822c\u6765\u8bf4\uff0c\u62cd\u6444\u957f\u5bbd\u4e24\u4e2a\u65b9\u5411\u4e0a\u5177\u6709\u4e0d\u540c\u65b9\u5757\u6570\u7684\u68cb\u76d8\u683c\u3002\u82e5\u957f\u5bbd\u65b9\u5757\u6570\u91cf\u76f8\u540c\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5b58\u5728\u4e8c\u4e49\u6027\uff0c\u65e0\u6cd5\u5206\u8fa8\u662f\u6ca1\u6709\u65cb\u8f6c\u7684\u7ed3\u679c\uff0c\u8fd8\u662f\u65cb\u8f6c\u4e86\\(180^{\\circ}\\)\u7684\u7ed3\u679c\u3002</p> <p>\u5bf9\u4e8e\u641c\u7d22\u5230\u50cf\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>cv2.cornerSubPix()</code>\u6765\u8fdb\u4e00\u6b65\u63d0\u9ad8\u4ed6\u4eec\u7684\u5750\u6807\u7cbe\u5ea6\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528<code>cv2.drawChessboardCorners</code>\u5728\u56fe\u50cf\u4e2d\u7ed8\u5236\u7cbe\u7ec6\u5316\u540e\u7684\u6709\u5e8f\u50cf\u70b9\u96c6\u5408\u3002\u4e0a\u8ff0\u7684\u6240\u6709\u6d41\u7a0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5b8c\u6210\u529f\u80fd\u5b9e\u73b0\u3002</p> <pre><code>import cv2\nimport glob\nimport numpy as np\n\n# termination criteria\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)\n# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)\nobjp = np.zeros((6 * 7, 3), np.float32)\nobjp[:, :2] = np.mgrid[0:7, 0:6].T.reshape(-1, 2)\n# Arrays to store object points and image points from all the images.\nobjpoints = []  # 3d point in real world space\nimgpoints = []  # 2d points in image plane.\nimages = glob.glob(\"*.jpg\")\nfor fname in images:\n    img = cv2.imread(fname)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    # Find the chess board corners\n    ret, corners = cv2.findChessboardCorners(gray, (7, 6), None)\n    # If found, add object points, image points (after refining them)\n    if ret == True:\n        objpoints.append(objp)\n        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)\n        imgpoints.append(corners2)\n        # Draw and display the corners\n        cv2.drawChessboardCorners(img, (7, 6), corners2, ret)\n        cv2.imshow(\"img\", img)\n        cv2.waitKey(500)\ncv2.destroyAllWindows()\n</code></pre> <p>\u5bf9\u4e8e\u4efb\u610f\u4e00\u5f20\u68cb\u76d8\u683c\u56fe\u50cf\uff0c\u641c\u7d22\u50cf\u70b9\u5e76\u5c06\u50cf\u70b9\u7ed8\u5236\u5728\u68cb\u76d8\u683c\u56fe\u50cf\u4e2d\u7684\u7ed3\u679c\u5982\u56fe2\u6240\u793a\u3002</p> <p> </p>      \u56fe2 \u6709\u5e8f\u50cf\u70b9\u7684\u53ef\u89c6\u5316","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_5","title":"\u6807\u5b9a\u53c2\u6570","text":"<p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u7528\u4e8e\u76f8\u673a\u7684\u6807\u5b9a\u7684\u5173\u952e\u4fe1\u606f\uff1a\u7269\u50cf\u70b9\u5bf9\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528<code>cv2.calibrateCamera()</code>\u51fd\u6570\u5b8c\u6210\u76f8\u673a\u7684\u6807\u5b9a\u8fc7\u7a0b\uff0c\u5f97\u5230\u76f8\u673a\u7684\u5185\u5916\u53c2\u6570\u4ee5\u53ca\u7578\u53d8\u53c2\u6570\u3002</p> <pre><code># ret - \u6807\u5b9a\u72b6\u6001\n# mtx - \u76f8\u673a\u5185\u53c2\u77e9\u9635\n# dist - \u7578\u53d8\u53c2\u6570\n# rvecs - \u65cb\u8f6c\u5411\u91cf\n# tvecs - \u5e73\u79fb\u5411\u91cf\nret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)\n</code></pre> \u8bd1\u8005\u6ce8\uff1a\u5f20\u6c0f\u6807\u5b9a\u6cd5 <p>\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u67e5\u770b\u5f20\u6b63\u53cb\u8001\u5e08\u4e8e1998\u5e74\u53d1\u8868\u7684\u8bba\u6587\uff0c\u5176\u4e2d\u8be6\u7ec6\u89e3\u91ca\u4e86\u76f8\u673a\u6807\u5b9a\u7684\u8fc7\u7a0b\u548c\u6570\u5b66\u63a8\u5bfc<sup>5</sup>\u3002</p>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_6","title":"\u56fe\u50cf\u6d88\u7578\u53d8","text":"<p>\u5728\u83b7\u5f97\u4e86\u76f8\u673a\u6807\u5b9a\u53c2\u6570\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u5b8c\u6210\u56fe\u50cf\u6d88\u7578\u53d8\u4efb\u52a1\u4e86\u3002\u5e76\u4e14\uff0cOpenCV\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\u6765\u5b8c\u6210\u8fd9\u9879\u4efb\u52a1\uff1a\u4f7f\u7528<code>cv2.undistort()</code>\u51fd\u6570\u548c\u4f7f\u7528<code>cv2.remap()</code>\u51fd\u6570\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>cv2.getOptimalNewCameraMatrix()</code>\u51fd\u6570\u5bf9\u76f8\u673a\u5185\u90e8\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\u8fdb\u884c\u4f18\u5316\uff0c\u4f18\u5316\u7684\u7ed3\u679c\u7531\u81ea\u7531\u5ea6\u53c2\u6570\\(\\alpha\\)\u63a7\u5236\u3002\u6d88\u7578\u53d8\u65f6\uff0c\u4f1a\u5229\u7528\u6807\u5b9a\u53c2\u6570\u751f\u6210\u53d8\u6362\u77e9\u9635\u5bf9\u56fe\u50cf\u8fdb\u884c\u4fee\u6539\u3002\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\uff0c\u56fe\u50cf\u7684\u8fb9\u7f18\u53ef\u80fd\u4f1a\u51fa\u73b0\u9ed1\u8fb9\u73b0\u8c61\u3002\u5f53\u4f18\u5316\u81ea\u7531\u5ea6\u53c2\u6570\\(\\alpha=0\\)\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u4f1a\u8fd4\u56de\u4e00\u7ec4\u80fd\u591f\u8ba9\u9ed1\u8fb9\u53d8\u5f97\u6700\u5c0f\u7684\u6807\u5b9a\u53c2\u6570\uff0c\u6b64\u65f6\u56fe\u50cf\u7684\u8fb9\u7f18\u53ef\u80fd\u4f1a\u4e22\u5931\u4e00\u4e9b\u542b\u6709\u4fe1\u606f\u7684\u50cf\u7d20\uff1b\u5f53\u4f18\u5316\u81ea\u7531\u5ea6\u53c2\u6570\\(\\alpha=1\\)\u65f6\uff0c\u8be5\u51fd\u6570\u4e0d\u4f1a\u9488\u5bf9\u9ed1\u8fb9\u8fdb\u884c\u4f18\u5316\uff0c\u6b64\u65f6\u6d88\u7578\u53d8\u7684\u7ed3\u679c\u4f1a\u5305\u542b\u9ed1\u8fb9\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u4f1a\u8fd4\u56de\u4e00\u4e2a\u56fe\u50cf\u7684ROI\uff0c\u7528\u4e8e\u5c06\u56fe\u50cf\u7684\u9ed1\u8fb9\u88c1\u526a\u79fb\u9664\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u5f85\u5904\u7406\u56fe\u50cf\uff0c\u7136\u540e\u4f7f\u7528<code>cv2.getOptimalNewCameraMatrix()</code>\u51fd\u6570\u4f18\u5316\u76f8\u673a\u7684\u5185\u90e8\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\u3002\u672c\u6587\u4f7f\u7528\u7684\u662f\u540d\u4e3a<code>left12.jpg</code>\u7684\u56fe\u50cf\uff0c\u4e5f\u5c31\u662f\u672c\u6587\u7684\u56fe1\u3002</p> <pre><code>img = cv2.imread('left12.jpg')\nh, w = img.shape[:2]\nnewcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))\n</code></pre> <p>\u4f7f\u7528<code>cv2.undistort()</code>\u51fd\u6570</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u6700\u4e3a\u7b80\u5355\uff0c\u5c06\u4f18\u5316\u524d\u540e\u7684\u76f8\u673a\u5185\u53c2\u4e0e\u7578\u53d8\u53c2\u6570\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9<code>cv2.undistort()</code>\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6d88\u7578\u53d8\u540e\u7684\u7ed3\u679c\u3002\u7136\u540e\uff0c\u518d\u4f7f\u7528\u4e0a\u6587\u63d0\u5230\u7684ROI\u5bf9\u6d88\u7578\u53d8\u7ed3\u679c\u8fdb\u884c\u88c1\u526a\u3002</p> <pre><code># undistort\ndst = cv2.undistort(img, mtx, dist, None, newcameramtx)\n# crop the image\nx, y, w, h = roi\ndst = dst[y:y+h, x:x+w]\ncv2.imwrite('calibresult.png', dst)\n</code></pre> <p>\u4f7f\u7528<code>cv2.remap()</code>\u51fd\u6570</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u4e0e<code>cv2.undistort()</code>\u4e0d\u540c\uff1a\u4ed6\u9996\u5148\u4f7f\u7528<code>cv2.initUndistortRectifyMap()</code>\u51fd\u6570\u5efa\u7acb\u4e86\u6d88\u7578\u53d8\u5904\u7406\u524d\u540e\u56fe\u50cf\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u7136\u540e\u4f7f\u7528<code>cv2.remap()</code>\u5bf9\u5f85\u5904\u7406\u56fe\u50cf\u5e94\u7528\u8be5\u6620\u5c04\uff0c\u6700\u7ec8\u5f97\u5230\u6d88\u7578\u53d8\u7ed3\u679c\u3002</p> <pre><code># undistort\nmapx, mapy = cv2.initUndistortRectifyMap(mtx, dist, None, newcameramtx, (w,h), 5)\ndst = cv2.remap(img, mapx, mapy, cv2.INTER_LINEAR)\n# crop the image\nx, y, w, h = roi\ndst = dst[y:y+h, x:x+w]\ncv2.imwrite('calibresult.png', dst)\n</code></pre> <p>\u4f46\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\uff0c\u90fd\u80fd\u591f\u5f97\u5230\u76f8\u540c\u7684\u6d88\u7578\u53d8\u7ed3\u679c\u3002\u672c\u6587\u56fe1\u7684\u6d88\u7578\u53d8\u7ed3\u679c\u5982\u56fe3\u6240\u793a\u3002\u53ef\u4ee5\u53d1\u73b0\uff1a\u56fe\u50cf\u4e2d\u539f\u672c\u5411\u8fb9\u7f18\u81a8\u80c0\u7684\u7ebf\u6761\u53d8\u76f4\u4e86\u3002\u5728\u5b8c\u6210\u76f8\u673a\u6807\u5b9a\u548c\u4f18\u5316\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528numpy\u4e2d\u7684<code>numpy.savez()</code>\u6216<code>numpy.savetxt()</code>\u65b9\u6cd5\u4fdd\u5b58\u76f8\u673a\u5185\u5916\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\uff0c\u4ee5\u4fbf\u540e\u7eed\u8bfb\u53d6\u4f7f\u7528\u3002</p> <p> </p>      \u56fe3 \u56fe\u50cf\u6d88\u7578\u53d8\u7ed3\u679c\u793a\u4f8b","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_7","title":"\u91cd\u6295\u5f71\u8bef\u5dee","text":"<p>\u91cd\u6295\u5f71\u8bef\u5dee\u53ef\u4ee5\u7528\u4e8e\u4f30\u8ba1\u7528\u4e8e\u56fe\u50cf\u6d88\u7578\u53d8\u53c2\u6570\u7684\u597d\u574f\uff1a\u91cd\u6295\u5f71\u8bef\u5dee\u8d8a\u63a5\u8fd1\u4e8e\u96f6\uff0c\u8bf4\u660e\u6d88\u7578\u53d8\u53c2\u6570\u8d8a\u7cbe\u786e\u3002\u5728\u8ba1\u7b97\u5f97\u5230\u76f8\u673a\u7684\u5185\u5916\u53c2\u6570\u548c\u7578\u53d8\u53c2\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>cv2.projectPoints</code>\u51fd\u6570\u5c06\u7269\u70b9\u8f6c\u6362\u5230\u4e8c\u7ef4\u7a7a\u95f4\u5f97\u5230\u7406\u8bba\u50cf\u70b9\uff1b\u7136\u540e\uff0c\u8ba1\u7b97\u7406\u8bba\u50cf\u70b9\u548c\u5b9e\u9645\u50cf\u70b9\u4e4b\u95f4\u5750\u6807\u7684\u6b27\u5f0f\u8ddd\u79bb\uff1b\u6700\u540e\uff0c\u8ba1\u7b97\u6240\u6709\u7406\u8bba\u50cf\u70b9\u548c\u5b9e\u9645\u50cf\u70b9\u4e4b\u95f4\u6b27\u5f0f\u8ddd\u79bb\u7684\u7b97\u672f\u5747\u503c\u4f5c\u4e3a\u91cd\u6295\u5f71\u8bef\u5dee\u3002</p> <pre><code>mean_error = 0\nfor i in range(len(objpoints)):\n    imgpoints2, _ = cv2.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)\n    error = cv2.norm(imgpoints[i], imgpoints2, cv2.NORM_L2)/len(imgpoints2)\n    mean_error += error\nprint( \"total error: {}\".format(mean_error/len(objpoints)) )\n</code></pre>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"camera-calibration-using-opencv/#_8","title":"\u5b8c\u6574\u7684\u4ee3\u7801","text":"\u4f7f\u7528C++\u548cPython\u5b9e\u73b0\u7684\u5b8c\u6574\u6d4b\u8bd5\u4ee3\u7801 C++Python <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\n#include &lt;opencv2/opencv.hpp&gt;\n\nint main() {\n  std::vector&lt;std::string&gt; inputPaths;  // \u9700\u8981\u7ed9\u5b9a\u8f93\u5165\u56fe\u50cf\u7ec4\n\n  std::vector&lt;cv::Mat&gt; inputImages;\n  inputImages.reserve(inputPaths.size());\n  for (const auto&amp; inputPath : inputPaths) {\n    cv::Mat inputImage = cv::imread(inputPath);\n    if (inputImage.empty()) {\n      std::cout &lt;&lt; \"Input image is empty. [\" &lt;&lt; inputPath &lt;&lt; \"]\\n\";\n      return EXIT_FAILURE;\n    }\n    inputImages.push_back(inputImage);\n  }\n\n  size_t imageCount = inputImages.size();\n\n  std::vector&lt;cv::Mat&gt; inputGrayImages;\n  inputGrayImages.reserve(inputImages.size());\n  for (const auto&amp; inputImage : inputImages) {\n    cv::Mat inputGrayImage;\n    cv::cvtColor(inputImage, inputGrayImage, cv::COLOR_BGR2GRAY);\n    inputGrayImages.push_back(inputGrayImage);\n  }\n\n  static std::vector&lt;cv::Point3f&gt; objectPoint = [](const cv::Size&amp; size) {\n    std::vector&lt;cv::Point3f&gt; points;\n    for (auto h = 0; h &lt; size.height; h++) {\n      for (auto w = 0; w &lt; size.width; w++) {\n        points.emplace_back(w, h, 0.F);\n      }\n    }\n    return points;\n  }(cv::Size(7, 6));\n\n  std::vector&lt;std::vector&lt;cv::Point3f&gt;&gt; objectPoints;\n  objectPoints.reserve(inputImages.size());\n  std::vector&lt;std::vector&lt;cv::Point2f&gt;&gt; imagePoints;\n  imagePoints.reserve(inputImages.size());\n  const cv::Size patternSize(7, 6);\n  const auto criteria = cv::TermCriteria(\n      cv::TermCriteria::Type::EPS + cv::TermCriteria::Type::MAX_ITER, 30,\n      0.001);\n  for (size_t i = 0; i &lt; imageCount; i++) {\n    std::cout &lt;&lt; inputPaths[i] &lt;&lt; std::endl;\n    std::vector&lt;cv::Point2f&gt; corners;\n    auto ret =\n        cv::findChessboardCorners(inputGrayImages[i], patternSize, corners);\n    if (ret) {\n      objectPoints.push_back(objectPoint);\n      cv::cornerSubPix(inputGrayImages[i], corners, cv::Size(11, 11),\n                       cv::Size(-1, -1), criteria);\n      imagePoints.push_back(corners);\n    }\n  }\n\n  auto imageSize = inputGrayImages.front().size();\n\n  cv::Mat cameraMatrix;\n  cv::Mat distCoeffs;\n  std::vector&lt;cv::Mat&gt; rvecs;\n  std::vector&lt;cv::Mat&gt; tvecs;\n  auto ret = cv::calibrateCamera(objectPoints, imagePoints, imageSize,\n                                 cameraMatrix, distCoeffs, rvecs, tvecs);\n  std::cout &lt;&lt; \"Total error: \" &lt;&lt; ret &lt;&lt; \"\\n\";\n\n  cv::Rect validPixROI;\n  auto newCameraMatrix = cv::getOptimalNewCameraMatrix(\n      cameraMatrix, distCoeffs, imageSize, 1.F, imageSize, &amp;validPixROI);\n\n  for (size_t i = 0; i &lt; imageCount; i++) {\n    cv::Mat undistortImage;\n    cv::undistort(inputImages[i], undistortImage, cameraMatrix, distCoeffs,\n                  newCameraMatrix);\n    std::string outputImageName =\n        \"undistortImage_\" + std::to_string(i) + \".png\";\n    cv::imwrite(outputImageName, undistortImage(validPixROI));\n  }\n\n  float meanError = 0.F;\n  for (size_t i = 0; i &lt; objectPoints.size(); i++) {\n    std::vector&lt;cv::Point2f&gt; objectProjectToImagePoints;\n    cv::projectPoints(objectPoints[i], rvecs[i], tvecs[i], cameraMatrix,\n                      distCoeffs, objectProjectToImagePoints);\n    auto error =\n        cv::norm(imagePoints[i], objectProjectToImagePoints, cv::NORM_L2);\n    error /= objectProjectToImagePoints.size();\n    meanError += error;\n  }\n\n  meanError /= objectPoints.size();\n  std::cout &lt;&lt; \"Total error: \" &lt;&lt; ret &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre> <pre><code>import cv2\nimport glob\nimport numpy as np\nfrom pprint import pprint\n\ncriteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)\n\nobj_point = np.zeros((6 * 7, 3), np.float32)\nobj_point[:, :2] = np.mgrid[0:7, 0:6].T.reshape(-1, 2)\n\nobj_points = []\nimg_points = []\n\nimage_names = [] # \u9700\u8981\u7ed9\u5b9a\u8f93\u5165\u56fe\u50cf\u7ec4\n\n(w, h) = (0, 0)\n\nfor image_name in image_names:\n    pprint(\"Current image: [{}]\".format(image_name))\n    image = cv2.imread(image_name)\n    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    (w, h) = image_gray.shape[::-1]\n\n    ret, corners = cv2.findChessboardCorners(image_gray, (7, 6), None)\n    # ret, corners = cv2.findCirclesGrid(image_gray, (7, 6), None)\n    if ret is True:\n        obj_points.append(obj_point)\n        corners_refined = cv2.cornerSubPix(image_gray, corners, (11, 11), (-1, -1), criteria)\n        img_points.append(corners_refined)\n\npprint(\"Image w = {}, h = {}\".format(w, h))\nret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(obj_points, img_points, (w, h), None, None)\n\n# undistortion\nimage = cv2.imread(image_names[0])\nnew_camera_mtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w, h), 1, (w, h))\ndst = cv2.undistort(image, mtx, dist, None, new_camera_mtx)\n\n# x, y, w, h = roi\n# dst = dst[y: y+h, x: x+w]\ncv2.imwrite(\"calibresult.png\", dst)\n\n# reprojection error\nmean_error = 0\nfor i in range(len(obj_points)):\n    img_points2, _ = cv2.projectPoints(obj_points[i], rvecs[i], tvecs[i], mtx, dist)\n    error = cv2.norm(img_points[i], img_points2, cv2.NORM_L2) / len(img_points2)\n    print(error)\n    mean_error += error\npprint(\"Total error: {}\".format(mean_error / len(obj_points)))\n</code></pre> <ol> <li> <p>OpenCV: Camera Calibration \u21a9\u21a9</p> </li> <li> <p>Distortion (optics) \u21a9</p> </li> <li> <p>LearnOpenGL-CN \u5750\u6807\u7cfb\u7edf \u21a9</p> </li> <li> <p>\u76f8\u673a\u6807\u5b9a\u4e2d\u5404\u79cd\u6807\u5b9a\u677f\u4ecb\u7ecd\u4ee5\u53ca\u4f18\u7f3a\u70b9\u5206\u6790 \u21a9</p> </li> <li> <p>A Flexible New Technique for Camera Calibration \u21a9</p> </li> </ol>","tags":["\u56fe\u50cf\u5904\u7406","\u6587\u7ae0\u7ffb\u8bd1"]},{"location":"tags/","title":"\u6807\u7b7e","text":""},{"location":"tags/#cc","title":"C/C++","text":"<ul> <li>\u8865\u5145startsWith\u65b9\u6cd5</li> </ul>"},{"location":"tags/#_2","title":"\u56fe\u50cf\u5904\u7406","text":"<ul> <li>\u7ffb\u8bd1: OpenCV\u76f8\u673a\u6807\u5b9a</li> </ul>"},{"location":"tags/#_3","title":"\u6587\u7ae0\u7ffb\u8bd1","text":"<ul> <li>\u7ffb\u8bd1: OpenCV\u76f8\u673a\u6807\u5b9a</li> </ul>"},{"location":"blog/std-string-starts-with/","title":"\u8865\u5145startsWith\u65b9\u6cd5","text":"<p>\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u5f80\u5f80\u90fd\u4f1a\u63d0\u4f9b<code>startsWith</code>\u65b9\u6cd5\uff0c\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32\u53d8\u91cf\u662f\u5426\u4ee5\u7ed9\u5b9a\u7684\u5b50\u4e32\u4f5c\u4e3a\u524d\u7f00\u3002</p> <p>\u5728Java\u4e2d\uff0c<code>startsWith</code>\u51fd\u6570\u7684\u539f\u578b<sup>1</sup>\u4e3a\uff1a</p> <pre><code>// @param chars: A String, representing the character(s) to check for.\n// @return: A boolean value:\n//          true  - if the string starts with the specified character(s).\n//          false - if the string does not start with the specified \n//                  character(s).\npublic boolean startsWith(String chars);\n</code></pre>","tags":["C/C++"]},{"location":"blog/std-string-starts-with/#stdrfind","title":"std::rfind","text":"<p>C++\u7684string\u7c7b\u5e76\u672a\u76f4\u63a5\u63d0\u4f9b<code>startsWith</code>\u63a5\u53e3\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528<code>rfind</code>\u5b9e\u73b0\u7c7b\u4f3c\u7684\u6548\u679c\u3002<code>rfind</code>\u7684\u51fd\u6570\u539f\u578b<sup>2</sup>\u4e3a\uff1a</p> <pre><code>size_t rfind(const string&amp; str, size_t pos = npos) const noexcept;\n</code></pre> <p>cplusplus.com</p> <p>When pos is specified, the search only includes sequences of characters that begin at or before position pos, ignoring any possible match beginning after pos.<sup>2</sup></p> <p>\u8fd9\u91cc\uff0c<code>pos</code>\u53c2\u6570\u53ef\u4ee5\u7701\u7565\uff0c\u6b64\u65f6<code>rfind</code>\u5c06\u4f1a\u5f97\u5230\u5339\u914d\u7ed3\u679c\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5f53\u4f7f\u7528<code>pos</code>\u65f6\uff0c<code>rfind</code>\u53ea\u4f1a\u641c\u7d22<code>pos</code>\u4e4b\u524d\u548c<code>pos</code>\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5373<code>rfind</code>\u4e0d\u518d\u5339\u914d<code>pos</code>\u4e4b\u540e\u7684\u4f4d\u7f6e\u3002</p> <p>\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b9e\u73b0<code>startsWith</code>\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528<code>pos = 0</code>\u3002\u6b64\u65f6\uff0c<code>rfind</code>\u5c06\u53ea\u641c\u7d22\u5b57\u7b26\u4e32\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u4e14\u53ea\u641c\u7d22\u4e00\u6b21\uff0c\u4ece\u800c\u5b9e\u73b0\u548c<code>startsWith</code>\u76f8\u540c\u7684\u6548\u679c<sup>3</sup>\u3002</p>","tags":["C/C++"]},{"location":"blog/std-string-starts-with/#_1","title":"\u793a\u4f8b\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\ninline bool startsWith(const std::string&amp; str, const std::string&amp; chars) {\n  return str.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(const std::string&amp; str, const char* chars) {\n  return str.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(const std::string&amp; str, char ch) {\n  return str.rfind(ch, 0) == 0;\n}\n\nint main() {\n  string s = \"abcdefabcdef\";\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, \"abc\") &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, \"bcd\") &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, 'a') &lt;&lt; std::endl;\n  std::cout &lt;&lt; std::boolalpha &lt;&lt; startsWith(s, 'b') &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>","tags":["C/C++"]},{"location":"blog/std-string-starts-with/#c17c20","title":"C++17\u548cC++20\u4e2d\u7684\u53d8\u5316","text":"<p>\u5728C++17\u6807\u51c6\u5e26\u6765\u4e86\u5173\u4e8e<code>std::string</code>\u7684\u89c6\u56fe<code>std::string_view</code>\u3002<code>std::string_view</code>\u672c\u8d28\u4e0a\u662f\u4e0d\u6301\u6709\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4ec5\u4fdd\u7559\u5bf9\u5b57\u7b26\u4e32\u5bf9\u8c61\u53ea\u8bfb\u5f15\u7528\u7684\u7c7b<sup>4</sup>\u3002<code>std::string_view</code>\u7684\u4e3b\u8981\u76ee\u7684\u662f\u907f\u514d<code>std::string</code>\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4ea7\u751f\u7684\u6784\u9020\u6216\u62f7\u8d1d\u884c\u4e3a<sup>5</sup><sup>6</sup>\u3002\u5bf9\u5e94\u7684\uff0c\u4f7f\u7528<code>std::string_view</code>\u5b9e\u73b0<code>startsWith</code>\u7684\u5185\u5bb9\u5982\u4e0b\uff0c\u4e0e<code>std::string</code>\u51e0\u4e4e\u6ca1\u6709\u533a\u522b\u3002</p> <pre><code>inline bool startsWith(std::string_view sv, std::string_view chars) {\n  return sv.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(std::string_view sv, const char* chars) {\n  return sv.rfind(chars, 0) == 0;\n}\n\ninline bool startsWith(std::string_view sv, char ch) {\n  return sv.rfind(ch, 0) == 0;\n}\n</code></pre> <p>\u800cC++20\u6807\u51c6\u5219\u76f4\u63a5\u4e3a<code>std::string</code>\u548c\u89c6\u56fe<code>std::string_view</code>\u8865\u5145\u4e86<code>starts_with()</code>\u65b9\u6cd5\uff0c\u7528\u4e8e\u5224\u65ad\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u89c6\u56fe\u662f\u5426\u4ee5\u7279\u5b9a\u5b57\u7b26\u5e8f\u5217\u5f00\u59cb<sup>7</sup>\u3002</p> <pre><code>constexpr bool starts_with( basic_string_view sv ) const noexcept;  // since C++20\nconstexpr bool starts_with( CharT ch ) const noexcept;  // since C++20\nconstexpr bool starts_with( const CharT* s ) const;  // since C++20\n</code></pre> <ol> <li> <p>Java String startsWith() Method \u21a9</p> </li> <li> <p>cplusplus.com - std::string::rfind \u21a9\u21a9</p> </li> <li> <p>How do I check if a C++ std::string starts with a certain string, and convert a substring to an int? \u21a9</p> </li> <li> <p>Microsoft -  \u21a9 <li> <p>C++17 string_view\u7684\u539f\u7406 \u21a9</p> </li> <li> <p>C++17 \u7279\u6027:\u4f7f\u7528 std::string_view \u65f6\u5c0f\u5fc3\u8e29\u5751 \u21a9</p> </li> <li> <p>cppreference.com - std::basic_string_view::starts_with \u21a9","tags":["C/C++"]},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","title":"\u7f16\u7a0b\u8bed\u8a00","text":""},{"location":"tags/","title":"\u6807\u7b7e","text":""},{"location":"tags/#cc","title":"C/C++","text":"<ul> <li>\u8865\u5145startsWith\u65b9\u6cd5</li> </ul>"},{"location":"tags/#_2","title":"\u56fe\u50cf\u5904\u7406","text":"<ul> <li>\u7ffb\u8bd1: OpenCV\u76f8\u673a\u6807\u5b9a</li> </ul>"},{"location":"tags/#_3","title":"\u6587\u7ae0\u7ffb\u8bd1","text":"<ul> <li>\u7ffb\u8bd1: OpenCV\u76f8\u673a\u6807\u5b9a</li> </ul>"}]}